#!/bin/bash

initial_dir=$(pwd)

src=$(dirname $0)
src=$(cd $src;pwd)
source $src/testing-common-vault.sh

create_test_dir

write_text() {
    echo -ne "$1" > $2
}

write_random() {
    dd if=/dev/urandom of=$3 bs=$1 count=$2 2>>$test_err
}

dump_curdir_tree() {
    for f in $(find | sort); do
        if [ -d $f ]; then
            echo "d:$f"
        elif [ -L $f ]; then
            echo "l:$f:$(readlink $f)"
        elif [ -f $f ]; then
            if [ "$(head -c 5 $f)" == "text:" ]; then
                echo "f:$f:$(cat $f)"
            else
                echo "f:$f:md5:$(md5sum -b $f)"
            fi
        fi
    done
}


storage_path() {
    echo $storage/root/$1
}

check_home_storage_same_filenames() {
    cd $(storage_path) && dump_curdir_tree > $test_dir/find_src
    cd $test_home && dump_curdir_tree > $test_dir/find_dst
    diff $test_dir/find_src $test_dir/find_dst || error 11 "Tree is not fully copied?"
}

create_test_dirs_and_vault() {
    create_test_dirs_next
    vault_create
    cd_vault_and_check_it
}

NEXT_TEST "Basic copy"
create_test_dirs_and_vault
vault_sync_opts="-a import -r"
basic_vault_import_single() {
    trace "Import $1 to $test_home"
    vault-sync $vault_sync_opts $1 $test_home || error 21 "copy existed with $?"
    if [ $# -ge 2 ]; then
        ${@:2}
    fi
    check_home_storage_same_filenames
    rm $1 -rf
    rm $test_home/* -rf
    [[ $(find $test_home | wc -l) -eq 1 ]] || error 22 "Test home should be empty"
}
test_step "empty directory"
entry_name=$(storage_path d0)
mkdir -p $entry_name
basic_vault_import_single $entry_name 

basic_steps_wo_dir() {
    test_step "empty file" $1
    entry_name=$(storage_path f1)
    touch $entry_name
    basic_vault_import_single $entry_name

    test_step "1-sym file" $1
    entry_name=$(storage_path f2)
    write_text "2" $entry_name
    basic_vault_import_single $entry_name

    test_step "longer text" $1
    entry_name=$(storage_path f3)
    write_text "0123456789 0123456789" $entry_name
    basic_vault_import_single $entry_name

    test_step "big file (> chunk size)" $1
    entry_name=$(storage_path big4)
    write_random 1024 1058 $entry_name
    basic_vault_import_single $entry_name

    test_step "symlink" $1
    entry_name=$(storage_path ln1)
    target_name=$storage/f1
    touch $target_name
    ln -s $target_name $entry_name
    basic_vault_import_single $entry_name

    test_step "rel symlink" $1
    entry_name=$(storage_path ln1)
    target_name=../f1
    pushd $(storage_path) 1>/dev/null
    touch $target_name
    ln -s $target_name $entry_name
    popd 1>/dev/null
    basic_vault_import_single $entry_name
}
basic_steps_wo_dir "recursive"

vault_sync_opts="-a import"
test_step "Omit directory"
entry_name=$(storage_path d_omit)
mkdir -p $entry_name
basic_vault_import_single $entry_name "rmdir $entry_name"

basic_steps_wo_dir "non-recursive"

exit 0 # TODO

NEXT_TEST "Copy when exists"
create_test_dirs_and_vault
# src
mkdir -p $storage/d0
touch $storage/f1
write_text "2" $storage/f2
write_text "0123456789 0123456789" $storage/f3
write_random 1024 1058 $storage/big_f4
# dst
mkdir -p $test_home/d0
write_text "before" $test_home/f1
write_text "before" $test_home/f2
write_text "before" $test_home/f3
write_random 1024 512 $test_home/big_f4
vault-sync -a import -r $storage $test_home || error 22 "copy existed with $?"
check_home_storage_same_filenames

NEXT_TEST "Copy binary"
create_test_dirs_and_vault
write_text "0123456789 0123456789" $test_home/b1
vault-sync -b -a export $test_home/b1 $storage || error 22 "copy existed with $?"
