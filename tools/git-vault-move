#!/bin/bash

src=$(dirname $0)
src=$(cd $src;pwd)
source $src/vault-misc $src

init_root_and_enter
ensure_param_count_exit_usage $# 1 "<new_git_dir>" $@

dst=$1

out_of_tree="out"
in_the_tree="in"
src_location=
src=
dotgit=$(readlink -f $root/.git)

if [ -f $dotgit ]; then
    re="s|gitdir: \(.*\)$|\1|"
    src=$(cat $root/.git | sed -e "$re")
    [ -d $src ] || error 42 "Current src isn't a dir: $src"
    src_location=$out_of_tree
    trace "External source: $src"
elif [ -d $dotgit ]; then
    src_location=$in_the_tree
    src=$dotgit
    trace "Internal source: $src"
else
    error 10 "Not dir|file $src/.git"
fi

dst=$(readlink -f $dst)
src=$(readlink -f $src)

[ "$dst" == "$src" ] && error 23 "$src=$dst"

dst_location=
if [ "$dotgit" == "$dst" ]; then
    trace "Moving .git into the tree"
    [ -f "$dotgit" ] || error 48 "Destination $dotgit should be file"
    dst_location=$in_the_tree
else
    [ -e "$dst" ] && error 22 "Dst should not exist: $dst"
    dst_location=$out_of_tree
fi

for f in "$dotgit.old" "$dotgit.new"; do
    [ -e "$f" ] && (rm "$f" || error 15 "Can't rm $f")
done

if [ $dst_location == $out_of_tree ]; then
    mkdir -p $dst || error 24 "Can't create dst dir: $dst"
fi

for d in "$root" "$src" "$dst" "$dotgit"; do
    [ -w "$d" ] || error 29 "'$d' is not writable"
done

src_dev=$(stat -c "%d" $src)
dst_dev=$(stat -c "%d" $dst)
is_same_dev=false
if [ $src_dev -eq $dst_dev ]; then
    trace "Same device"
    is_same_dev=true
fi

trace "Going to do: $src->$dst, .git=$dotgit"

function rollback_dotgit {
    trace "Rollback .git"
    if [ $dst_location == $in_the_tree ]; then
        [ -d "$dotgit" ] && rmdir "$dotgit"
        [ -e "$dotgit.old" ] && mv "$dotgit.old" "$dotgit"
        [ -e "$dotgit.new" ] && rm "$dotgit.new"
    fi
    error $@
}

function prepare_dotgit {
    if [ -e $dotgit ]; then
        mv $dotgit $dotgit.old || error 13 "Can't mv $dotgit $dotgit.old"
    fi
    echo "gitdir: $dst" > $dotgit.new || rollback_dotgit 31 "Can't write gitdir to $dotgit.new"
}

if [ $dst_location == $in_the_tree ]; then
    prepare_dotgit
    mkdir $dotgit || rollback_dotgit 32 "Can't create dir $gitdir"
fi

([ -d "$src" ] && [ -d "$dst" ]) || rollback_dotgit 33 "$src and $dst should be dirs"

cmd=false
if $is_same_dev; then
    trace "Same device, move"
    cmd="mv -T '$src' '$dst'"
else
    trace "Different devices, copy"
    cmd="cp -rTLpuf '$src' '$dst'"
fi

trace "Command: $cmd"

function rollback {
    msg="$1. Aux info:"
    if $is_same_dev; then
        msg="$msg Can't move $src, check $dst"
    else
        if ! rm -rf "$dst"; then
            msg="$msg Can't rm $dst"
        fi
    fi
    rollback_dotgit 55 $msg
}

if eval "$cmd"; then
    if [ $dst_location == $out_of_tree ]; then
        prepare_dotgit
    fi
    mv $dotgit.new $dotgit || rollback "Failed to mv $dotgit.new $dotgit"
    if [ $src_location == $out_of_tree ] && ! $is_same_dev; then
        if [ -d "$src" ]; then
            rm -rf "$src" || warn "Can't remove $src"
        else
            warn "Source should still exists but it doesn't: $src"
        fi
    fi
    [ -e $dotgit.old ] && rm $dotgit.old -rf
else
    rollback "Failed to execute $cmd"
    exit 1 # just to be sure it exits
fi
trace "Successfully moved $src->$dst"
