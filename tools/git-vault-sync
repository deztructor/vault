#!/bin/bash

src=$(dirname $0)
src=$(cd $src;pwd)
source $src/vault-misc $src

init_root_and_enter

full_uri=$1

if [ "x$full_uri" == "x" ]; then
    full_uri=$(git config --get remote.origin.url)
fi

src_repo=
port=
user=
host=
src_type=

split_git_uri $full_uri

sync_tool=
cp_tool=

has_rsync=0
if which rsync 1>/dev/null; then has_rsync=1; fi

case "$src_type" in
    ssh)
        trace "SRC:user=$user,host=$host,port=$port,path=$src_repo"
        has_scp=0
        if which scp 1>/dev/null; then has_scp=1; fi
        if [ $has_scp ]; then
            if [ $has_rsync ]; then
                sync_tool=rsync
            else
                sync_tool=scp
            fi
            cp_tool=scp
        elif [ $has_rsync ]; then
            sync_tool=rsync
            cp_tool=rsync
        else
            error 51 "No rsync, no scp"
        fi
        ;;
    local)
        trace "SRC:path=$src_repo"
        if ! [ -d "$path" ]; then
            error 3 "Local path doesn't exists: $path"
        fi
        if [ $has_rsync ]; then
            sync_tool=rsync
        else
            sync_tool=cp
        fi
        cp_tool=cp
        ;;
    *)
        error 4 "Unsupported uri: $uri"
esac

trace "Tools: sync=$sync_tool, cp=$cp_tool"

if [ $(vault_tree_version) -ge 3 ]; then
    trace "Sync .git/info"
fi

case $sync_tool in
    rsync)
        if [ $src_type == "local" ]; then
            sync_cmd="$sync_tool -avz"
            src_prefix=$src_repo/
        else
            src_prefix=$user@$host:$src_repo/
            if [ "x$port" == "x" ]; then
                sync_cmd='$sync_tool -avz'
            else
                sync_cmd="$sync_tool -avz -e 'ssh -p $port'"
            fi
        fi
        ;;
    scp)
        src_prefix=$user@$host:$src_repo/
        if [ "x$port" == "x" ]; then
            sync_cmd='scp'
        else
            sync_cmd="scp -r -p -P $port"
        fi
        
        ;;
    cp)
        src_prefix=$src_repo/
        sync_cmd="cp -rLpuf"
        ;;
    *)
        
esac

if [ "x$sync_cmd" == "x" ]; then
    error 66 "No sync command defined"
fi

cp_cmd=

case $cp_tool in
    rsync)
        if [ $src_type == "local" ]; then
            cp_cmd="$cp_tool -avz"
            src_prefix="$src_repo/"
        else
            src_prefix=$user@$host:$src_repo/
            if [ "x$port" == "x" ]; then
                cp_cmd='$sync_tool -avz'
            else
                cp_cmd="$sync_tool -avz -e 'ssh -p $port'"
            fi
        fi
        ;;
    scp)
        src_prefix=$user@$host:$src_repo/
        if [ "x$port" == "x" ]; then
            cp_cmd='scp'
        else
            cp_cmd="scp -r -p -P $port"
        fi
        
        ;;
    cp)
        src_prefix=$src_repo/
        cp_cmd="cp -rLpuf"
        ;;
    *)
        esac

if [ "x$cp_cmd" == "x" ]; then
    error 66 "No cp command defined"
fi

cmd=$(get_vault_lock_cmd "$cmd $sync_cmd ${src_prefix}.git/blobs/. .git/blobs/")
trace "Sync blobs: $cmd"
eval "$cmd" || error 27 "Error executing '$cmd'"

if ! git config user.name 1>/dev/null; then
    tmp_config=$(mktemp)
    trap "rm $tmp_config" EXIT
    cmd=$(get_vault_lock_cmd "$cp_cmd ${src_prefix}.git/config $tmp_config")
    trace "Copy config through $tmp_config"
    eval "$cmd" || error 27 "Error executing '$cmd'"
    git config user.name $(git config --file $tmp_config user.name)
    git config user.email $(git config --file $tmp_config user.email)
    rm $tmp_config; trap "echo" EXIT
fi
git config status.showUntrackedFiles all
cmd=$(get_vault_lock_cmd "$cp_cmd ${src_prefix}.git/info $(repo_version_path ${src_prefix}) $(units_path ${src_prefix}) .git")
trace "Duplicate storage metadata: $cmd"
eval "$cmd" || error 27 "Error executing '$cmd'"
cmd=$(get_vault_lock_cmd "$sync_cmd $(units_path ${src_prefix}) $(units_path $root)")
trace "Sync units : $cmd"
eval "$cmd" || error 27 "Error executing '$cmd'"
